diff --git a/ENVIRONMENT_SETUP.md b/ENVIRONMENT_SETUP.md
new file mode 100644
index 0000000..0128cdd
--- /dev/null
+++ b/ENVIRONMENT_SETUP.md
@@ -0,0 +1,10 @@
+# Environment Setup
+
+This project uses a mock-first environment by default. To run locally:
+
+1. Create a `.env.local` file based on `.env.local.example`.
+2. Set `NEXT_PUBLIC_APP_ENV=mock` to use the mock data layer.
+3. Install dependencies: `pnpm install`.
+4. Run development server: `pnpm dev` or `npm run dev`.
+
+Ensure Node.js 18+ is installed.
diff --git a/MOCK_DATA_GUIDE.md b/MOCK_DATA_GUIDE.md
new file mode 100644
index 0000000..633be6c
--- /dev/null
+++ b/MOCK_DATA_GUIDE.md
@@ -0,0 +1,12 @@
+# Mock Data Guide
+
+The mock data layer resides in `core/mock`.
+
+- `products.json`: catalog of products.
+- `orders.json`: order records.
+- `bills.json`: billing records.
+- `customers.json`: customer profiles.
+- `store-profile.json`: store configuration.
+- `receipts.json`: receipts linked to bills.
+
+To add or modify data, edit these JSON files directly. They will be loaded by the API layer at runtime.
diff --git a/ROUTE_MAP.md b/ROUTE_MAP.md
new file mode 100644
index 0000000..3be6737
--- /dev/null
+++ b/ROUTE_MAP.md
@@ -0,0 +1,13 @@
+# Route Map
+
+This project contains both admin and customer routes.
+
+- Admin dashboard: `/admin/dashboard`
+- Admin orders: `/admin/orders`
+- Admin bills: `/admin/bills`
+- Bill detail: `/admin/bill/[billId]`
+- Store settings: `/admin/settings/store`
+- Collections: `/collections/[slug]`
+- Bill view: `/bill/view/[billId]`
+
+Run `npm run route:audit` to generate a full route/component list.
diff --git a/app/admin/bill/[billId]/page.tsx b/app/admin/bill/[billId]/page.tsx
new file mode 100644
index 0000000..9741c8d
--- /dev/null
+++ b/app/admin/bill/[billId]/page.tsx
@@ -0,0 +1,33 @@
+"use client";
+import { useEffect, useState } from 'react';
+import { useRouter } from 'next/navigation';
+
+export default function BillDetail({ params }: { params: { billId: string } }) {
+  const [bill, setBill] = useState<any | null>(null);
+  const router = useRouter();
+  useEffect(() => {
+    async function fetchBill() {
+      const res = await fetch('/api/mock/bills?id=' + params.billId);
+      const data = await res.json();
+      setBill(data);
+    }
+    fetchBill();
+  }, [params.billId]);
+  const handleStatusUpdate = async () => {
+    await fetch('/api/bill/update-status', {
+      method: 'POST',
+      headers: { 'Content-Type': 'application/json' },
+      body: JSON.stringify({ billId: params.billId, status: 'updated' })
+    });
+    router.refresh();
+  };
+  if (!bill) return <p>Loading...</p>;
+  return (
+    <div className="p-8">
+      <h1 className="text-2xl font-bold mb-4">บิล {bill.id}</h1>
+      <p>ลูกค้า: {bill.customerId}</p>
+      <p>สถานะ: {bill.status}</p>
+      <button className="mt-4 p-2 border" onClick={handleStatusUpdate}>ปรับสถานะ</button>
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/app/admin/bills/page.tsx b/app/admin/bills/page.tsx
new file mode 100644
index 0000000..6934f2e
--- /dev/null
+++ b/app/admin/bills/page.tsx
@@ -0,0 +1,39 @@
+"use client";
+import { useEffect, useState } from 'react';
+import Link from 'next/link';
+
+export default function AdminBills() {
+  const [bills, setBills] = useState<any[]>([]);
+  useEffect(() => {
+    fetch('/api/mock/bills')
+      .then((res) => res.json())
+      .then((data) => setBills(data));
+  }, []);
+  return (
+    <div className="p-8">
+      <h1 className="text-2xl font-bold mb-4">บิล</h1>
+      <table className="w-full border-collapse">
+        <thead>
+          <tr>
+            <th className="border p-2">ID</th>
+            <th className="border p-2">ลูกค้า</th>
+            <th className="border p-2">สถานะ</th>
+            <th className="border p-2">Action</th>
+          </tr>
+        </thead>
+        <tbody>
+          {bills.map((bill) => (
+            <tr key={bill.id}>
+              <td className="border p-2">{bill.id}</td>
+              <td className="border p-2">{bill.customerId}</td>
+              <td className="border p-2">{bill.status}</td>
+              <td className="border p-2">
+                <Link href={`/admin/bill/${bill.id}`}>View</Link>
+              </td>
+            </tr>
+          ))}
+        </tbody>
+      </table>
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/app/admin/dashboard/page.tsx b/app/admin/dashboard/page.tsx
new file mode 100644
index 0000000..2f29bb4
--- /dev/null
+++ b/app/admin/dashboard/page.tsx
@@ -0,0 +1,32 @@
+"use client";
+import { useEffect, useState } from 'react';
+
+export default function AdminDashboard() {
+  const [kpi, setKpi] = useState<any | null>(null);
+  useEffect(() => {
+    async function fetchData() {
+      const ordersRes = await fetch('/api/mock/orders');
+      const billsRes = await fetch('/api/mock/bills');
+      const orders = await ordersRes.json();
+      const bills = await billsRes.json();
+      setKpi({
+        orders: orders.length,
+        bills: bills.length
+      });
+    }
+    fetchData();
+  }, []);
+  return (
+    <div className="p-8">
+      <h1 className="text-2xl font-bold mb-4">แดชบอร์ด</h1>
+      {kpi ? (
+        <div className="grid grid-cols-2 gap-4">
+          <div className="p-4 border rounded-xl">คำสั่งซื้อ: {kpi.orders}</div>
+          <div className="p-4 border rounded-xl">บิล: {kpi.bills}</div>
+        </div>
+      ) : (
+        <p>Loading...</p>
+      )}
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/app/admin/orders/page.tsx b/app/admin/orders/page.tsx
index 9070377..ac03477 100644
--- a/app/admin/orders/page.tsx
+++ b/app/admin/orders/page.tsx
@@ -1,288 +1,34 @@
-"use client"
-
-import type React from "react"
-import { useEffect, useState } from "react"
-import { useRouter } from "next/navigation"
-import { Button } from "@/components/ui/button"
-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
-import {
-  Dialog,
-  DialogContent,
-  DialogDescription,
-  DialogHeader,
-  DialogTitle,
-  DialogTrigger,
-} from "@/components/ui/dialog"
-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
-import { Badge } from "@/components/ui/badge"
-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
-import { Label } from "@/components/ui/label"
-import { Eye, Edit, Trash2 } from 'lucide-react'
-import { useAuthStore } from "@/lib/store"
-import { fetchOrders, updateOrder, deleteOrder, Order, OrderItem } from "@/actions/orders"
-import { format } from 'date-fns'
-import { th } from 'date-fns/locale'
+"use client";
+import { useEffect, useState } from 'react';
 
 export default function AdminOrders() {
-  const router = useRouter()
-  const { isAuthenticated, checkAuth } = useAuthStore()
-  const [orders, setOrders] = useState<Order[]>([])
-  const [loading, setLoading] = useState(true)
-  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)
-  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)
-  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null)
-  const [newStatus, setNewStatus] = useState<Order['status'] | ''>('')
-
-  useEffect(() => {
-    checkAuth()
-  }, [checkAuth])
-
+  const [orders, setOrders] = useState<any[]>([]);
   useEffect(() => {
-    if (!isAuthenticated && !loading) {
-      router.push("/admin/login")
-    }
-  }, [isAuthenticated, router, loading])
-
-  useEffect(() => {
-    const loadOrders = async () => {
-      setLoading(true)
-      if (isAuthenticated) {
-        const { orders: fetchedOrders } = await fetchOrders()
-        setOrders(fetchedOrders)
-      }
-      setLoading(false)
-    }
-    loadOrders()
-  }, [isAuthenticated])
-
-  if (loading || !isAuthenticated) {
-    return (
-      <div className="min-h-screen flex items-center justify-center bg-gray-50 py-8">
-        <p className="font-sarabun">กำลังโหลด...</p>
-      </div>
-    )
-  }
-
-  const handleView = (order: Order) => {
-    setSelectedOrder(order)
-    setIsViewDialogOpen(true)
-  }
-
-  const handleEditStatus = (order: Order) => {
-    setSelectedOrder(order)
-    setNewStatus(order.status)
-    setIsEditDialogOpen(true)
-  }
-
-  const handleUpdateStatus = async () => {
-    if (selectedOrder && newStatus) {
-      const result = await updateOrder(selectedOrder.id, { status: newStatus })
-      if (result.success) {
-        const { orders: fetchedOrders } = await fetchOrders()
-        setOrders(fetchedOrders)
-        setIsEditDialogOpen(false)
-        setSelectedOrder(null)
-        setNewStatus('')
-      } else {
-        alert(`Failed to update order status: ${result.error}`)
-      }
-    }
-  }
-
-  const handleDelete = async (id: string) => {
-    if (confirm("คุณแน่ใจหรือไม่ที่จะลบคำสั่งซื้อนี้? การดำเนินการนี้ไม่สามารถย้อนกลับได้")) {
-      const result = await deleteOrder(id)
-      if (result.success) {
-        const { orders: fetchedOrders } = await fetchOrders()
-        setOrders(fetchedOrders)
-      } else {
-        alert(`Failed to delete order: ${result.error}`)
-      }
-    }
-  }
-
-  const getStatusBadgeVariant = (status: Order['status']) => {
-    switch (status) {
-      case 'pending':
-        return 'default'
-      case 'processing':
-        return 'secondary'
-      case 'completed':
-        return 'secondary'
-      case 'cancelled':
-        return 'destructive'
-      default:
-        return 'default'
-    }
-  }
-
+    fetch('/api/mock/orders')
+      .then((res) => res.json())
+      .then((data) => setOrders(data));
+  }, []);
   return (
-    <div className="min-h-screen bg-gray-50 py-8">
-      <div className="container mx-auto px-4">
-        <div className="flex justify-between items-center mb-8">
-          <div>
-            <h1 className="text-3xl font-bold text-slate-900 mb-2 font-sarabun">จัดการคำสั่งซื้อ</h1>
-            <p className="text-gray-600 font-sarabun">ดูและจัดการคำสั่งซื้อของลูกค้า</p>
-          </div>
-        </div>
-
-        <Card>
-          <CardHeader>
-            <CardTitle className="font-sarabun">รายการคำสั่งซื้อ</CardTitle>
-            <CardDescription className="font-sarabun">จำนวนคำสั่งซื้อทั้งหมด: {orders.length} รายการ</CardDescription>
-          </CardHeader>
-          <CardContent>
-            <Table>
-              <TableHeader>
-                <TableRow>
-                  <TableHead className="font-sarabun">รหัสคำสั่งซื้อ</TableHead>
-                  <TableHead className="font-sarabun">วันที่</TableHead>
-                  <TableHead className="font-sarabun">ผู้ใช้</TableHead>
-                  <TableHead className="font-sarabun">ยอดรวม</TableHead>
-                  <TableHead className="font-sarabun">สถานะ</TableHead>
-                  <TableHead className="font-sarabun">สถานะชำระเงิน</TableHead>
-                  <TableHead className="font-sarabun">จัดการ</TableHead>
-                </TableRow>
-              </TableHeader>
-              <TableBody>
-                {orders.map((order) => (
-                  <TableRow key={order.id}>
-                    <TableCell className="font-medium font-sarabun">{order.id.substring(0, 8)}...</TableCell>
-                    <TableCell className="font-sarabun">{format(new Date(order.created_at), 'dd MMM yyyy HH:mm', { locale: th })}</TableCell>
-                    <TableCell className="font-sarabun">{order.user_id.substring(0, 8)}...</TableCell>
-                    <TableCell className="font-sarabun">฿{order.total_amount.toLocaleString()}</TableCell>
-                    <TableCell>
-                      <Badge variant={getStatusBadgeVariant(order.status)} className="font-sarabun">
-                        {order.status === 'pending' && 'รอดำเนินการ'}
-                        {order.status === 'processing' && 'กำลังดำเนินการ'}
-                        {order.status === 'completed' && 'สำเร็จ'}
-                        {order.status === 'cancelled' && 'ยกเลิก'}
-                      </Badge>
-                    </TableCell>
-                    <TableCell className="font-sarabun">
-                      <Badge variant={order.payment_status === 'paid' ? 'secondary' : 'default'} className="font-sarabun">
-                        {order.payment_status === 'paid' && 'ชำระแล้ว'}
-                        {order.payment_status === 'unpaid' && 'ยังไม่ชำระ'}
-                        {order.payment_status === 'refunded' && 'คืนเงินแล้ว'}
-                      </Badge>
-                    </TableCell>
-                    <TableCell>
-                      <div className="flex gap-2">
-                        <Button size="sm" variant="outline" onClick={() => handleView(order)}>
-                          <Eye className="w-4 h-4" />
-                        </Button>
-                        <Button size="sm" variant="outline" onClick={() => handleEditStatus(order)}>
-                          <Edit className="w-4 h-4" />
-                        </Button>
-                        <Button size="sm" variant="outline" onClick={() => handleDelete(order.id)}>
-                          <Trash2 className="w-4 h-4" />
-                        </Button>
-                      </div>
-                    </TableCell>
-                  </TableRow>
-                ))}
-              </TableBody>
-            </Table>
-          </CardContent>
-        </Card>
-
-        {/* View Order Dialog */}
-        <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>
-          <DialogContent className="max-w-3xl">
-            <DialogHeader>
-              <DialogTitle className="font-sarabun">รายละเอียดคำสั่งซื้อ #{selectedOrder?.id.substring(0, 8)}...</DialogTitle>
-              <DialogDescription className="font-sarabun">ข้อมูลทั้งหมดเกี่ยวกับคำสั่งซื้อนี้</DialogDescription>
-            </DialogHeader>
-            {selectedOrder && (
-              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm font-sarabun">
-                <div>
-                  <h3 className="font-bold mb-2">ข้อมูลคำสั่งซื้อ</h3>
-                  <p><strong>รหัส:</strong> {selectedOrder.id}</p>
-                  <p><strong>วันที่:</strong> {format(new Date(selectedOrder.created_at), 'dd MMM yyyy HH:mm', { locale: th })}</p>
-                  <p><strong>ผู้ใช้ ID:</strong> {selectedOrder.user_id}</p>
-                  <p><strong>ยอดรวม:</strong> ฿{selectedOrder.total_amount.toLocaleString()}</p>
-                  <p><strong>สถานะ:</strong> <Badge variant={getStatusBadgeVariant(selectedOrder.status)}>{selectedOrder.status}</Badge></p>
-                  <p><strong>สถานะชำระเงิน:</strong> <Badge variant={selectedOrder.payment_status === 'paid' ? 'secondary' : 'default'}>{selectedOrder.payment_status}</Badge></p>
-                  {selectedOrder.notes && <p><strong>หมายเหตุ:</strong> {selectedOrder.notes}</p>}
-                </div>
-                <div>
-                  <h3 className="font-bold mb-2">ที่อยู่จัดส่ง</h3>
-                  <p>{selectedOrder.shipping_address?.name}</p>
-                  <p>{selectedOrder.shipping_address?.address_line1}</p>
-                  {selectedOrder.shipping_address?.address_line2 && <p>{selectedOrder.shipping_address.address_line2}</p>}
-                  <p>{selectedOrder.shipping_address?.city}, {selectedOrder.shipping_address?.state} {selectedOrder.shipping_address?.zip_code}</p>
-                  <p>{selectedOrder.shipping_address?.country}</p>
-                  <p>โทร: {selectedOrder.shipping_address?.phone}</p>
-                </div>
-                <div className="md:col-span-2">
-                  <h3 className="font-bold mb-2">รายการสินค้า</h3>
-                  {selectedOrder.order_items && selectedOrder.order_items.length > 0 ? (
-                    <Table>
-                      <TableHeader>
-                        <TableRow>
-                          <TableHead>สินค้า</TableHead>
-                          <TableHead>จำนวน</TableHead>
-                          <TableHead>ราคาต่อหน่วย</TableHead>
-                          <TableHead>รวม</TableHead>
-                        </TableRow>
-                      </TableHeader>
-                      <TableBody>
-                        {selectedOrder.order_items.map((item) => (
-                          <TableRow key={item.id}>
-                            <TableCell>{item.product_name}</TableCell>
-                            <TableCell>{item.quantity}</TableCell>
-                            <TableCell>฿{(item.price_at_purchase ?? 0).toLocaleString()}</TableCell>
-                            <TableCell>฿{(item.quantity * (item.price_at_purchase ?? 0)).toLocaleString()}</TableCell>
-                          </TableRow>
-                        ))}
-                      </TableBody>
-                    </Table>
-                  ) : (
-                    <p>ไม่มีรายการสินค้าในคำสั่งซื้อนี้</p>
-                  )}
-                </div>
-              </div>
-            )}
-          </DialogContent>
-        </Dialog>
-
-        {/* Edit Status Dialog */}
-        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
-          <DialogContent className="max-w-md">
-            <DialogHeader>
-              <DialogTitle className="font-sarabun">แก้ไขสถานะคำสั่งซื้อ #{selectedOrder?.id.substring(0, 8)}...</DialogTitle>
-              <DialogDescription className="font-sarabun">เลือกสถานะใหม่สำหรับคำสั่งซื้อนี้</DialogDescription>
-            </DialogHeader>
-            {selectedOrder && (
-              <div className="space-y-4">
-                <div>
-                  <Label htmlFor="status" className="font-sarabun">สถานะ</Label>
-                  <Select
-                    value={newStatus}
-                    onValueChange={(value: Order['status']) => setNewStatus(value)}
-                  >
-                    <SelectTrigger id="status">
-                      <SelectValue placeholder="เลือกสถานะ" />
-                    </SelectTrigger>
-                    <SelectContent>
-                      <SelectItem value="pending">รอดำเนินการ</SelectItem>
-                      <SelectItem value="processing">กำลังดำเนินการ</SelectItem>
-                      <SelectItem value="completed">สำเร็จ</SelectItem>
-                      <SelectItem value="cancelled">ยกเลิก</SelectItem>
-                    </SelectContent>
-                  </Select>
-                </div>
-                <div className="flex justify-end gap-2">
-                  <Button type="button" variant="outline" onClick={() => setIsEditDialogOpen(false)}>
-                    ยกเลิก
-                  </Button>
-                  <Button onClick={handleUpdateStatus}>บันทึก</Button>
-                </div>
-              </div>
-            )}
-          </DialogContent>
-        </Dialog>
-      </div>
+    <div className="p-8">
+      <h1 className="text-2xl font-bold mb-4">คำสั่งซื้อ</h1>
+      <table className="w-full border-collapse">
+        <thead>
+          <tr>
+            <th className="border p-2">ID</th>
+            <th className="border p-2">ลูกค้า</th>
+            <th className="border p-2">สถานะ</th>
+          </tr>
+        </thead>
+        <tbody>
+          {orders.map((order) => (
+            <tr key={order.id}>
+              <td className="border p-2">{order.id}</td>
+              <td className="border p-2">{order.customerId}</td>
+              <td className="border p-2">{order.status}</td>
+            </tr>
+          ))}
+        </tbody>
+      </table>
     </div>
-  )
-}
+  );
+}
\ No newline at end of file
diff --git a/app/admin/settings/store/page.tsx b/app/admin/settings/store/page.tsx
new file mode 100644
index 0000000..b3a42c1
--- /dev/null
+++ b/app/admin/settings/store/page.tsx
@@ -0,0 +1,64 @@
+"use client";
+import { useEffect, useState } from 'react';
+
+export default function StoreSettings() {
+  const [store, setStore] = useState<any | null>(null);
+  const [form, setForm] = useState<any>({});
+  useEffect(() => {
+    async function fetchProfile() {
+      const res = await fetch('/api/config/store-profile');
+      const data = await res.json();
+      setStore(data);
+      setForm(data);
+    }
+    fetchProfile();
+  }, []);
+  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
+    setForm({ ...form, [e.target.name]: e.target.value });
+  };
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    await fetch('/api/config/store-profile', {
+      method: 'POST',
+      headers: { 'Content-Type': 'application/json' },
+      body: JSON.stringify(form)
+    });
+    setStore(form);
+  };
+  if (!store) return <p>Loading...</p>;
+  return (
+    <div className="p-8">
+      <h1 className="text-2xl font-bold mb-4">โปรไฟล์ร้าน</h1>
+      <form onSubmit={handleSubmit} className="flex flex-col gap-2">
+        <label>
+          ชื่อร้าน:
+          <input
+            className="border p-2 w-full"
+            name="name"
+            value={form.name || ''}
+            onChange={handleChange}
+          />
+        </label>
+        <label>
+          ที่อยู่:
+          <input
+            className="border p-2 w-full"
+            name="address"
+            value={form.address || ''}
+            onChange={handleChange}
+          />
+        </label>
+        <label>
+          เบอร์โทร:
+          <input
+            className="border p-2 w-full"
+            name="phone"
+            value={form.phone || ''}
+            onChange={handleChange}
+          />
+        </label>
+        <button className="mt-4 p-2 border" type="submit">บันทึก</button>
+      </form>
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/app/api/bill/update-receipt/route.ts b/app/api/bill/update-receipt/route.ts
new file mode 100644
index 0000000..eac0562
--- /dev/null
+++ b/app/api/bill/update-receipt/route.ts
@@ -0,0 +1,12 @@
+import { NextRequest, NextResponse } from 'next/server';
+import { update, create } from '../../../../core/mock/db';
+
+export async function POST(req: NextRequest) {
+  const body = await req.json();
+  const { billId, receipt } = body;
+  // add receipt to receipts list
+  const newReceipt = create('receipts', { billId, ...receipt });
+  // update bill with receipt id or other info as needed
+  const updatedBill = update('bills', billId, { receiptId: newReceipt.id });
+  return NextResponse.json(updatedBill || {});
+}
\ No newline at end of file
diff --git a/app/api/bill/update-status/route.ts b/app/api/bill/update-status/route.ts
new file mode 100644
index 0000000..e0e134e
--- /dev/null
+++ b/app/api/bill/update-status/route.ts
@@ -0,0 +1,9 @@
+import { NextRequest, NextResponse } from 'next/server';
+import { update } from '../../../../core/mock/db';
+
+export async function POST(req: NextRequest) {
+  const body = await req.json();
+  const { billId, status } = body;
+  const updated = update('bills', billId, { status });
+  return NextResponse.json(updated || {});
+}
\ No newline at end of file
diff --git a/app/api/config/store-profile/route.ts b/app/api/config/store-profile/route.ts
new file mode 100644
index 0000000..87f1241
--- /dev/null
+++ b/app/api/config/store-profile/route.ts
@@ -0,0 +1,16 @@
+import { NextRequest, NextResponse } from 'next/server';
+import fs from 'fs';
+import path from 'path';
+
+const filePath = path.join(process.cwd(), 'core', 'mock', 'store-profile.json');
+
+export async function GET() {
+  const data = fs.existsSync(filePath) ? JSON.parse(fs.readFileSync(filePath, 'utf8')) : {};
+  return NextResponse.json(data);
+}
+
+export async function POST(req: NextRequest) {
+  const body = await req.json();
+  fs.writeFileSync(filePath, JSON.stringify(body, null, 2), 'utf8');
+  return NextResponse.json(body);
+}
\ No newline at end of file
diff --git a/app/api/mock/bills/route.ts b/app/api/mock/bills/route.ts
new file mode 100644
index 0000000..5eb066d
--- /dev/null
+++ b/app/api/mock/bills/route.ts
@@ -0,0 +1,33 @@
+import { NextRequest, NextResponse } from 'next/server';
+import { getAll, getById, create, update, remove } from '../../../../core/mock/db';
+
+export async function GET(req: NextRequest) {
+  const { searchParams } = new URL(req.url);
+  const id = searchParams.get('id');
+  if (id) {
+    const item = getById('bills', id);
+    return NextResponse.json(item || {});
+  }
+  const items = getAll('bills');
+  return NextResponse.json(items);
+}
+
+export async function POST(req: NextRequest) {
+  const body = await req.json();
+  const item = create('bills', body);
+  return NextResponse.json(item);
+}
+
+export async function PUT(req: NextRequest) {
+  const body = await req.json();
+  const id = body.id;
+  const updated = update('bills', id, body);
+  return NextResponse.json(updated || {});
+}
+
+export async function DELETE(req: NextRequest) {
+  const body = await req.json();
+  const id = body.id;
+  const result = remove('bills', id);
+  return NextResponse.json(result);
+}
\ No newline at end of file
diff --git a/app/api/mock/customers/route.ts b/app/api/mock/customers/route.ts
new file mode 100644
index 0000000..68946a4
--- /dev/null
+++ b/app/api/mock/customers/route.ts
@@ -0,0 +1,33 @@
+import { NextRequest, NextResponse } from 'next/server';
+import { getAll, getById, create, update, remove } from '../../../../core/mock/db';
+
+export async function GET(req: NextRequest) {
+  const { searchParams } = new URL(req.url);
+  const id = searchParams.get('id');
+  if (id) {
+    const item = getById('customers', id);
+    return NextResponse.json(item || {});
+  }
+  const items = getAll('customers');
+  return NextResponse.json(items);
+}
+
+export async function POST(req: NextRequest) {
+  const body = await req.json();
+  const item = create('customers', body);
+  return NextResponse.json(item);
+}
+
+export async function PUT(req: NextRequest) {
+  const body = await req.json();
+  const id = body.id;
+  const updated = update('customers', id, body);
+  return NextResponse.json(updated || {});
+}
+
+export async function DELETE(req: NextRequest) {
+  const body = await req.json();
+  const id = body.id;
+  const result = remove('customers', id);
+  return NextResponse.json(result);
+}
\ No newline at end of file
diff --git a/app/api/mock/orders/route.ts b/app/api/mock/orders/route.ts
new file mode 100644
index 0000000..b9db41f
--- /dev/null
+++ b/app/api/mock/orders/route.ts
@@ -0,0 +1,33 @@
+import { NextRequest, NextResponse } from 'next/server';
+import { getAll, getById, create, update, remove } from '../../../../core/mock/db';
+
+export async function GET(req: NextRequest) {
+  const { searchParams } = new URL(req.url);
+  const id = searchParams.get('id');
+  if (id) {
+    const item = getById('orders', id);
+    return NextResponse.json(item || {});
+  }
+  const items = getAll('orders');
+  return NextResponse.json(items);
+}
+
+export async function POST(req: NextRequest) {
+  const body = await req.json();
+  const item = create('orders', body);
+  return NextResponse.json(item);
+}
+
+export async function PUT(req: NextRequest) {
+  const body = await req.json();
+  const id = body.id;
+  const updated = update('orders', id, body);
+  return NextResponse.json(updated || {});
+}
+
+export async function DELETE(req: NextRequest) {
+  const body = await req.json();
+  const id = body.id;
+  const result = remove('orders', id);
+  return NextResponse.json(result);
+}
\ No newline at end of file
diff --git a/app/api/mock/products/route.ts b/app/api/mock/products/route.ts
new file mode 100644
index 0000000..0f5dfc9
--- /dev/null
+++ b/app/api/mock/products/route.ts
@@ -0,0 +1,33 @@
+import { NextRequest, NextResponse } from 'next/server';
+import { getAll, getById, create, update, remove } from '../../../../core/mock/db';
+
+export async function GET(req: NextRequest) {
+  const { searchParams } = new URL(req.url);
+  const id = searchParams.get('id');
+  if (id) {
+    const item = getById('products', id);
+    return NextResponse.json(item || {});
+  }
+  const items = getAll('products');
+  return NextResponse.json(items);
+}
+
+export async function POST(req: NextRequest) {
+  const body = await req.json();
+  const item = create('products', body);
+  return NextResponse.json(item);
+}
+
+export async function PUT(req: NextRequest) {
+  const body = await req.json();
+  const id = body.id;
+  const updated = update('products', id, body);
+  return NextResponse.json(updated || {});
+}
+
+export async function DELETE(req: NextRequest) {
+  const body = await req.json();
+  const id = body.id;
+  const result = remove('products', id);
+  return NextResponse.json(result);
+}
\ No newline at end of file
diff --git a/app/api/mock/receipts/route.ts b/app/api/mock/receipts/route.ts
new file mode 100644
index 0000000..8869e4b
--- /dev/null
+++ b/app/api/mock/receipts/route.ts
@@ -0,0 +1,33 @@
+import { NextRequest, NextResponse } from 'next/server';
+import { getAll, getById, create, update, remove } from '../../../../core/mock/db';
+
+export async function GET(req: NextRequest) {
+  const { searchParams } = new URL(req.url);
+  const id = searchParams.get('id');
+  if (id) {
+    const item = getById('receipts', id);
+    return NextResponse.json(item || {});
+  }
+  const items = getAll('receipts');
+  return NextResponse.json(items);
+}
+
+export async function POST(req: NextRequest) {
+  const body = await req.json();
+  const item = create('receipts', body);
+  return NextResponse.json(item);
+}
+
+export async function PUT(req: NextRequest) {
+  const body = await req.json();
+  const id = body.id;
+  const updated = update('receipts', id, body);
+  return NextResponse.json(updated || {});
+}
+
+export async function DELETE(req: NextRequest) {
+  const body = await req.json();
+  const id = body.id;
+  const result = remove('receipts', id);
+  return NextResponse.json(result);
+}
\ No newline at end of file
diff --git a/app/bill/view/[billId]/page.tsx b/app/bill/view/[billId]/page.tsx
new file mode 100644
index 0000000..256c87a
--- /dev/null
+++ b/app/bill/view/[billId]/page.tsx
@@ -0,0 +1,37 @@
+"use client";
+import { useEffect, useState } from 'react';
+
+export default function BillView({ params }: { params: { billId: string } }) {
+  const [bill, setBill] = useState<any | null>(null);
+  const [address, setAddress] = useState('');
+  useEffect(() => {
+    async function fetchBill() {
+      const res = await fetch('/api/mock/bills?id=' + params.billId);
+      const data = await res.json();
+      setBill(data);
+      setAddress(data?.shippingAddress || '');
+    }
+    fetchBill();
+  }, [params.billId]);
+  const handleUpdate = async () => {
+    await fetch('/api/mock/bills', {
+      method: 'PUT',
+      headers: { 'Content-Type': 'application/json' },
+      body: JSON.stringify({ id: params.billId, shippingAddress: address })
+    });
+  };
+  if (!bill) return <p>Loading...</p>;
+  return (
+    <div className="p-8">
+      <h1 className="text-2xl font-bold mb-4">บิล #{bill.id}</h1>
+      <p>สถานะ: {bill.status}</p>
+      <h2 className="text-lg font-bold mt-4">ที่อยู่ในการจัดส่ง</h2>
+      <input
+        className="border p-2 w-full"
+        value={address}
+        onChange={(e) => setAddress(e.target.value)}
+      />
+      <button className="mt-2 p-2 border" onClick={handleUpdate}>อัปเดตที่อยู่</button>
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/app/collections/[slug]/page.tsx b/app/collections/[slug]/page.tsx
new file mode 100644
index 0000000..59d5c43
--- /dev/null
+++ b/app/collections/[slug]/page.tsx
@@ -0,0 +1,27 @@
+"use client";
+import { useEffect, useState } from 'react';
+
+export default function CollectionPage({ params }: { params: { slug: string } }) {
+  const [products, setProducts] = useState<any[]>([]);
+  useEffect(() => {
+    fetch('/api/mock/products')
+      .then((res) => res.json())
+      .then((data) => {
+        // slug may represent a category; filter accordingly
+        setProducts(data.filter((p: any) => p.category === params.slug));
+      });
+  }, [params.slug]);
+  return (
+    <div className="p-8">
+      <h1 className="text-2xl font-bold mb-4">สินค้าหมวด {params.slug}</h1>
+      <div className="grid grid-cols-2 gap-4">
+        {products.map((product) => (
+          <div key={product.id} className="border p-4 rounded-xl">
+            <h2 className="text-lg font-bold">{product.name}</h2>
+            <p>{product.description}</p>
+          </div>
+        ))}
+      </div>
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/core/mock/bills.json b/core/mock/bills.json
new file mode 100644
index 0000000..fe51488
--- /dev/null
+++ b/core/mock/bills.json
@@ -0,0 +1 @@
+[]
diff --git a/core/mock/customers.json b/core/mock/customers.json
new file mode 100644
index 0000000..fe51488
--- /dev/null
+++ b/core/mock/customers.json
@@ -0,0 +1 @@
+[]
diff --git a/core/mock/db.ts b/core/mock/db.ts
new file mode 100644
index 0000000..cb20ad1
--- /dev/null
+++ b/core/mock/db.ts
@@ -0,0 +1,49 @@
+// Simple in-memory JSON database for mock data.
+import fs from 'fs';
+import path from 'path';
+
+const dataDir = path.join(process.cwd(), 'core', 'mock');
+
+function readEntity(entity: string) {
+  const filePath = path.join(dataDir, `${entity}.json`);
+  const text = fs.existsSync(filePath) ? fs.readFileSync(filePath, 'utf8') : '[]';
+  return JSON.parse(text);
+}
+
+function writeEntity(entity: string, data: any) {
+  const filePath = path.join(dataDir, `${entity}.json`);
+  fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
+}
+
+export function getAll(entity: string) {
+  return readEntity(entity);
+}
+
+export function getById(entity: string, id: string | number) {
+  const items = readEntity(entity);
+  return items.find((item: any) => String(item.id) === String(id));
+}
+
+export function create(entity: string, item: any) {
+  const items = readEntity(entity);
+  const newItem = { id: Date.now(), ...item };
+  items.push(newItem);
+  writeEntity(entity, items);
+  return newItem;
+}
+
+export function update(entity: string, id: string | number, updateData: any) {
+  const items = readEntity(entity);
+  const index = items.findIndex((item: any) => String(item.id) === String(id));
+  if (index === -1) return null;
+  items[index] = { ...items[index], ...updateData };
+  writeEntity(entity, items);
+  return items[index];
+}
+
+export function remove(entity: string, id: string | number) {
+  let items = readEntity(entity);
+  items = items.filter((item: any) => String(item.id) !== String(id));
+  writeEntity(entity, items);
+  return { success: true };
+}
\ No newline at end of file
diff --git a/core/mock/orders.json b/core/mock/orders.json
new file mode 100644
index 0000000..fe51488
--- /dev/null
+++ b/core/mock/orders.json
@@ -0,0 +1 @@
+[]
diff --git a/core/mock/products.json b/core/mock/products.json
new file mode 100644
index 0000000..fe51488
--- /dev/null
+++ b/core/mock/products.json
@@ -0,0 +1 @@
+[]
diff --git a/core/mock/receipts.json b/core/mock/receipts.json
new file mode 100644
index 0000000..fe51488
--- /dev/null
+++ b/core/mock/receipts.json
@@ -0,0 +1 @@
+[]
diff --git a/core/mock/store-profile.json b/core/mock/store-profile.json
new file mode 100644
index 0000000..0967ef4
--- /dev/null
+++ b/core/mock/store-profile.json
@@ -0,0 +1 @@
+{}
diff --git a/lib/env-validation.ts b/lib/env-validation.ts
new file mode 100644
index 0000000..0d90806
--- /dev/null
+++ b/lib/env-validation.ts
@@ -0,0 +1,12 @@
+// Simple environment validation utility.
+export function validateEnv() {
+  const env = process.env.NEXT_PUBLIC_APP_ENV;
+  if (!env) {
+    throw new Error('NEXT_PUBLIC_APP_ENV is not defined');
+  }
+  const allowed = ['mock', 'development', 'production'];
+  if (!allowed.includes(env)) {
+    throw new Error(`Invalid NEXT_PUBLIC_APP_ENV: ${env}`);
+  }
+  return env;
+}
\ No newline at end of file
diff --git a/package.json b/package.json
index 08d3fd9..2b49c0d 100644
--- a/package.json
+++ b/package.json
@@ -7,7 +7,9 @@
     "dev": "next dev",
     "lint": "next lint",
     "start": "next start",
-    "test": "jest"
+    "test": "jest",
+    "setup:check": "node scripts/setup-check.ts",
+    "route:audit": "node scripts/route-audit.ts"
   },
   "engines": {
     "node": ">=18"
diff --git a/scripts/route-audit.ts b/scripts/route-audit.ts
new file mode 100644
index 0000000..1bd98ce
--- /dev/null
+++ b/scripts/route-audit.ts
@@ -0,0 +1,33 @@
+// Script to audit routes and components in a Next.js app (app router).
+import fs from 'fs';
+import path from 'path';
+
+function findFiles(dir: string, match: RegExp, list: string[] = []) {
+  for (const file of fs.readdirSync(dir)) {
+    const fullPath = path.join(dir, file);
+    if (fs.statSync(fullPath).isDirectory()) {
+      findFiles(fullPath, match, list);
+    } else {
+      if (match.test(fullPath)) {
+        list.push(fullPath);
+      }
+    }
+  }
+  return list;
+}
+
+const projectRoot = process.cwd();
+const appDir = path.join(projectRoot, 'app');
+const apiDir = path.join(projectRoot, 'app', 'api');
+const compDir = path.join(projectRoot, 'components');
+
+const routes = fs.existsSync(appDir) ? findFiles(appDir, /\/page\.(tsx?|jsx?|mdx)$/) : [];
+const apiRoutes = fs.existsSync(apiDir) ? findFiles(apiDir, /\/route\.(ts|js)$/) : [];
+const components = fs.existsSync(compDir) ? findFiles(compDir, /\.(tsx?|jsx?)$/) : [];
+
+console.log('Routes:');
+routes.forEach((r) => console.log(' -', path.relative(projectRoot, r)));
+console.log('API Routes:');
+apiRoutes.forEach((r) => console.log(' -', path.relative(projectRoot, r)));
+console.log('Components:');
+components.forEach((c) => console.log(' -', path.relative(projectRoot, c)));
\ No newline at end of file
diff --git a/scripts/setup-check.ts b/scripts/setup-check.ts
new file mode 100644
index 0000000..19edbff
--- /dev/null
+++ b/scripts/setup-check.ts
@@ -0,0 +1,17 @@
+// Script to check environment readiness for mock-first build.
+import fs from 'fs';
+import path from 'path';
+
+console.log('Checking project setup...');
+
+// Check env example file
+const envExample = path.join(process.cwd(), '.env.local.example');
+if (!fs.existsSync(envExample)) {
+  console.error('.env.local.example is missing');
+  process.exit(1);
+}
+
+console.log('Environment example file exists.');
+
+// Additional checks could be added here.
+console.log('Setup check complete.');
\ No newline at end of file
